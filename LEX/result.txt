MACRO: #
KEYWORD: include
INCLUDE: <math.h>
MACRO: #
KEYWORD: include
INCLUDE: <stdio.h>
MACRO: #
KEYWORD: include
INCLUDE: <stdlib.h>
MACRO: #
KEYWORD: include
INCLUDE: <string.h>
MACRO: #
KEYWORD: define
ID0: bool
KEYWORD: int
MACRO: #
KEYWORD: define
ID1: false
NUM: 0
MACRO: #
KEYWORD: define
ID2: true
NUM: 1
MACRO: #
KEYWORD: define
ID3: MAXSIZE
NUM: 20
MACRO: #
KEYWORD: define
ID4: ElementType
KEYWORD: int
ANNODATE: /*
    数组线性表
*/
KEYWORD: typedef
KEYWORD: int
ID5: Position
PUNCTUATION: ;
KEYWORD: typedef
KEYWORD: struct
ID6: LNode
OPERATOR: *
ID7: List
PUNCTUATION: ;
KEYWORD: struct
ID8: LNode
BRACKET: {
ID9: ElementType
ID10: Data
BRACKET: [
ID11: MAXSIZE
BRACKET: ]
PUNCTUATION: ;
ID12: Position
ID13: Last
PUNCTUATION: ;
BRACKET: }
PUNCTUATION: ;
ANNODATE: /* 初始化 */
ID14: List
ID15: MakeEmpty
BRACKET: (
BRACKET: )
BRACKET: {
ID16: List
ID17: L
PUNCTUATION: ;
ID18: L
RELOP: =
BRACKET: (
ID19: List
BRACKET: )
ID20: malloc
BRACKET: (
KEYWORD: sizeof
BRACKET: (
KEYWORD: struct
ID21: LNode
BRACKET: )
BRACKET: )
PUNCTUATION: ;
ID22: L
OPERATOR: -
RELOP: >
ID23: Last
RELOP: =
OPERATOR: -
NUM: 1
PUNCTUATION: ;
KEYWORD: return
ID24: L
PUNCTUATION: ;
BRACKET: }
ANNODATE: /* 查找 */
MACRO: #
KEYWORD: define
ID25: ERROR
OPERATOR: -
NUM: 1
ID26: Position
ID27: Find
BRACKET: (
ID28: List
ID29: L
PUNCTUATION: ,
ID30: ElementType
ID31: X
BRACKET: )
BRACKET: {
ID32: Position
ID33: i
RELOP: =
NUM: 0
PUNCTUATION: ;
KEYWORD: while
BRACKET: (
ID34: i
RELOP: <=
ID35: L
OPERATOR: -
RELOP: >
ID36: Last
OPERATOR: &
OPERATOR: &
ID37: L
OPERATOR: -
RELOP: >
ID38: Data
BRACKET: [
ID39: i
BRACKET: ]
UNKNOW: !
RELOP: =
ID40: X
BRACKET: )
ID41: i
OPERATOR: +
OPERATOR: +
PUNCTUATION: ;
KEYWORD: if
BRACKET: (
ID42: i
RELOP: >
ID43: L
OPERATOR: -
RELOP: >
ID44: Last
BRACKET: )
KEYWORD: return
ID45: ERROR
PUNCTUATION: ;
ANNODATE: /* 如果没找到，返回错误信息 */
KEYWORD: else
KEYWORD: return
ID46: i
PUNCTUATION: ;
ANNODATE: /* 找到后返回的是存储位置 */
BRACKET: }
ANNODATE: /* 插入 */
ANNODATE: /*注意:在插入位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是存储下标位置（从0开始），两者差1*/
ID47: bool
ID48: Insert
BRACKET: (
ID49: List
ID50: L
PUNCTUATION: ,
ID51: ElementType
ID52: X
PUNCTUATION: ,
ID53: Position
ID54: P
BRACKET: )
BRACKET: {
ANNODATE: /* 在L的指定位置P前插入一个新元素X */
ID55: Position
ID56: i
PUNCTUATION: ;
KEYWORD: if
BRACKET: (
ID57: L
OPERATOR: -
RELOP: >
ID58: Last
RELOP: ==
ID59: MAXSIZE
OPERATOR: -
NUM: 1
BRACKET: )
BRACKET: {
ANNODATE: /* 表空间已满，不能插入 */
ID60: printf
BRACKET: (
STRING0: "表满"
BRACKET: )
PUNCTUATION: ;
KEYWORD: return
ID61: false
PUNCTUATION: ;
BRACKET: }
KEYWORD: if
BRACKET: (
ID62: P
RELOP: <
NUM: 0
OPERATOR: |
OPERATOR: |
ID63: P
RELOP: >
ID64: L
OPERATOR: -
RELOP: >
ID65: Last
OPERATOR: +
NUM: 1
BRACKET: )
BRACKET: {
ANNODATE: /* 检查插入位置的合法性 */
ID66: printf
BRACKET: (
STRING1: "位置不合法"
BRACKET: )
PUNCTUATION: ;
KEYWORD: return
ID67: false
PUNCTUATION: ;
BRACKET: }
KEYWORD: for
BRACKET: (
ID68: i
RELOP: =
ID69: L
OPERATOR: -
RELOP: >
ID70: Last
PUNCTUATION: ;
ID71: i
RELOP: >=
ID72: P
PUNCTUATION: ;
ID73: i
OPERATOR: -
OPERATOR: -
BRACKET: )
ID74: L
OPERATOR: -
RELOP: >
ID75: Data
BRACKET: [
ID76: i
OPERATOR: +
NUM: 1
BRACKET: ]
RELOP: =
ID77: L
OPERATOR: -
RELOP: >
ID78: Data
BRACKET: [
ID79: i
BRACKET: ]
PUNCTUATION: ;
ANNODATE: /* 将位置P及以后的元素顺序向后移动 */
ID80: L
OPERATOR: -
RELOP: >
ID81: Data
BRACKET: [
ID82: P
BRACKET: ]
RELOP: =
ID83: X
PUNCTUATION: ;
ANNODATE: /* 新元素插入 */
ID84: L
OPERATOR: -
RELOP: >
ID85: Last
OPERATOR: +
OPERATOR: +
PUNCTUATION: ;
ANNODATE: /* Last仍指向最后元素 */
KEYWORD: return
ID86: true
PUNCTUATION: ;
BRACKET: }
ANNODATE: /* 删除 */
ANNODATE: /*注意:在删除位置参数P上与课程视频有所不同，课程视频中i是序列位序（从1开始），这里P是存储下标位置（从0开始），两者差1*/
ID87: bool
ID88: Delete
BRACKET: (
ID89: List
ID90: L
PUNCTUATION: ,
ID91: Position
ID92: P
BRACKET: )
BRACKET: {
ANNODATE: /* 从L中删除指定位置P的元素 */
ID93: Position
ID94: i
PUNCTUATION: ;
KEYWORD: if
BRACKET: (
ID95: P
RELOP: <
NUM: 0
OPERATOR: |
OPERATOR: |
ID96: P
RELOP: >
ID97: L
OPERATOR: -
RELOP: >
ID98: Last
BRACKET: )
BRACKET: {
ANNODATE: /* 检查空表及删除位置的合法性 */
ID99: printf
BRACKET: (
STRING2: "位置%d不存在元素"
PUNCTUATION: ,
ID100: P
BRACKET: )
PUNCTUATION: ;
KEYWORD: return
ID101: false
PUNCTUATION: ;
BRACKET: }
KEYWORD: for
BRACKET: (
ID102: i
RELOP: =
ID103: P
OPERATOR: +
NUM: 1
PUNCTUATION: ;
ID104: i
RELOP: <=
ID105: L
OPERATOR: -
RELOP: >
ID106: Last
PUNCTUATION: ;
ID107: i
OPERATOR: +
OPERATOR: +
BRACKET: )
ID108: L
OPERATOR: -
RELOP: >
ID109: Data
BRACKET: [
ID110: i
OPERATOR: -
NUM: 1
BRACKET: ]
RELOP: =
ID111: L
OPERATOR: -
RELOP: >
ID112: Data
BRACKET: [
ID113: i
BRACKET: ]
PUNCTUATION: ;
ANNODATE: /* 将位置P+1及以后的元素顺序向前移动 */
ID114: L
OPERATOR: -
RELOP: >
ID115: Last
OPERATOR: -
OPERATOR: -
PUNCTUATION: ;
ANNODATE: /* Last仍指向最后元素 */
KEYWORD: return
ID116: true
PUNCTUATION: ;
BRACKET: }
